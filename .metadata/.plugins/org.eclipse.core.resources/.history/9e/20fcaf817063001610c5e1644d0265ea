package com.wmsterminal.activity.scan;

import in.srain.cube.views.ptr.R.string;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import android.R.color;
import android.R.integer;
import android.app.AlertDialog;
import android.app.DownloadManager.Request;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.AssetFileDescriptor;
import android.graphics.Color;
import android.graphics.Bitmap.Config;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View.OnClickListener;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.alibaba.fastjson.JSON;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.wmsterminal.R;
import com.wmsterminal.activity.ScanSeparateActivity;
import com.wmsterminal.activity.wms.WmsInputActivity;
import com.wmsterminal.base.activity.BaseActivity;
import com.wmsterminal.common.thread.NetWorkPost;
import com.wmsterminal.common.thread.TaskExecutor;
import com.wmsterminal.func.HadwareControll;
import com.wmsterminal.model.CheckShipment;
import com.wmsterminal.model.ReturnParcel;
import com.wmsterminal.util.IntentUtil;
import com.wmsterminal.util.ObjectUtil;
import com.wmsterminal.util.RequestUtil;
import com.wmsterminal.util.SharedUtil;

public class ScanReturnParcelActivity extends BaseActivity implements View.OnClickListener{

	public static final String KEY_RECEIVEER_ACTION = "com.idatachina.SCANKEYEVENT";

	public Handler mHandler = new MainHandler();
	//public ReadDoSomeThing readDoSomeThing;
	static ScanReturnParcelActivity ss;
	protected MediaPlayer mediaPlayer = null;
	HadwareControll controll = new HadwareControll(this);
	public boolean btn_scan =false;
	public  boolean et_scan = true;
	
	private int index = 1;
	private int etIndex = 0;
	private int number = 2;
	    
    private int tvIDIndex = 1000;
	private  boolean skuno = false;
	private boolean check = false;

    
    @ViewInject(R.id.ll_reparcel_scan)
    private LinearLayout llReparcel;
    
    private LinkedList<EditText> etLink;
    
    @ViewInject(R.id.et_parcels_scan)
    private EditText etParcel;
    
    @ViewInject(R.id.et_rpparcelnum_scan)
    private EditText etParcelNum;
    
    @ViewInject(R.id.tv_submit_scan)
    private TextView tvSubmit;
    
    private RelativeLayout rlReParcel;
    
    @ViewInject(R.id.cb_reparcel)
    private CheckBox ckBox;
       
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		controll.Open();
		controll.m_handler = mHandler;
	    IntentFilter m_keyfilter = new IntentFilter();
		m_keyfilter.addAction(KEY_RECEIVEER_ACTION);
		this.registerReceiver(_keyReceiver,m_keyfilter);
	}
	
	@Override
	protected void initView() {
		// TODO Auto-generated method stub
		super.initView();
		View view = getLayoutInflater().inflate(R.layout.scan_reparcel,null);
		mLinearLayout.addView(view);
		ViewUtils.inject(this);
	}
	
	@Override
	protected void initSet() {
		// TODO Auto-generated method stub
		super.initSet();
		ckBox =(CheckBox) findViewById(R.id.cb_reparcel);
		ckBox.setOnCheckedChangeListener(listener);
		etLink = new LinkedList<EditText>();
		etLink.add(etParcelNum);
		/*ckBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
			
			@Override
			public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
				// TODO Auto-generated method stub
				if (ckBox.isChecked() == true) {
					Log.e("checkbox","checkbox");
				}
			}
		});*/
	 }
	 private CheckBox.OnCheckedChangeListener listener = 
		        new CheckBox.OnCheckedChangeListener(){
		        
		        public void onCheckedChanged(CompoundButton buttonView,boolean isChecked)
		        {
		               //判断一共有四种情况
		            if(ckBox.isChecked()== true )
		            {
		            	check = true;
		            }else{
		            	check = false;
		            }
		           
		        }
		    }; 
		    
	
	
	@OnClick({R.id.tv_submit_scan})
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.tv_submit_scan:
			
			List<Map<String,String>> containedParcels = new ArrayList<>();
			//String mParcel = "RP160616000009";		
			String mParcel = etParcel.getText().toString().trim();
			/*for (int i = 0; i < 2; i++) {
				Map<String,String> mMap = new HashMap<>();
				mMap.put("parcelNum", "CN160725019566FR12PT1Y");
				containedParcels.add(mMap);
				}*/
			String mParcelNum = etParcelNum.getText().toString();
			Map<String,String> mMap = new HashMap<>();
			if (!ObjectUtil.isEmpty(etParcelNum.getText().toString())) {
				mMap.put("parcelNum", mParcelNum);
				containedParcels.add(mMap);
			}
			for (int i = 1; i < etLink.size()-1; i++) {
					if (!ObjectUtil.isEmpty(etLink.get(i).getText().toString())) {
						mMap.put("parcelNum", etLink.get(i).getText().toString());
						containedParcels.add(mMap);
					}
				
			}
			if (checkData(mParcel, containedParcels.size())) {
                showProgressDialog("正在登录...");
				Map<String, List<Map<String,String>>> maplist = new HashMap<>();
				maplist.put("containedParcels", containedParcels);
				Map<String ,String> map = RequestUtil.requByJson("reqJson",maplist);
			    Loge("scanReturn",map.get("reqJson"));
			    Loge("scanReturn",SharedUtil.getToken(ScanReturnParcelActivity.this)
			    );
				TaskExecutor.Execute(new NetWorkPost(this, "wms/returning-parcels/"
				+mParcel+"/register-for-contained-parcels", handler).
				setMapOfData(map,SharedUtil.getToken(ScanReturnParcelActivity.this)));
				
			}
			if (check) {
				
				int iWeight = 31;						
					Map<String, Integer> mapWeight = new HashMap<String,Integer>();
					mapWeight.put("weight", iWeight);
					Map<String,String> wMap = RequestUtil.requByJson("reqJson", mapWeight);
					Log.e("weight",wMap.get("reqJson"));
					//TaskExecutor.Execute(new NetWorkPost(this, "wms/returning-parcels/"+mParcel+"/register-for-overweight"
							//,handler,Config.RELEVANT_ONE).setMapOfData(wMap));
					TaskExecutor.Execute(new NetWorkPost(this, "wms/returning-parcels/"+mParcel+"/register-for-overweight"
							, handler, 1).setMapOfData(wMap,SharedUtil.getToken(this)));
					}	
		 	if (isFastDoubleClick()) {
                return;
            }
			break;

		default:
			break;
		}
		
	
	}
    private boolean checkData(String account, int num) {
		        if (ObjectUtil.isEmpty(account)) {
		        	Toast.makeText(this,"please input parcel", Toast.LENGTH_SHORT).show();		      
		            return false;
		        } else if (num < 1) {
		        	Toast.makeText(this,"please input parcelnum", Toast.LENGTH_SHORT).show();		       
		            return false;
		        } else {
		            return true;
		        }
	}
	private Handler handler = new Handler(){
		
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			hideProgressDialog();
		    ReturnParcel returnParcel = null;
			CheckShipment weightModel = null;
			if (msg.what == 0) {
			   String json = msg.obj.toString();
			   try {
				   returnParcel = JSON.parseObject(json, ReturnParcel.class);
			   } catch (Exception e) {
				   // TODO: handle exception
                   e.printStackTrace();
			   }
			   if (returnParcel == null) {
				   return;
			   }
			   if (returnParcel.getStatus().equals("success")) {
					showDialog(ScanReturnParcelActivity.this,ScanReturnParcelActivity.class,"submit success","Success");
				}else{
					showDialogHint(returnParcel);
				}
			 			
			}else {				
				String json =msg.obj.toString();
				try {
					weightModel = JSON.parseObject(json,CheckShipment.class);
				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
				}	
				if(weightModel == null){
					return;
				}
				if (weightModel.getStatus().equals("success")) {
					//showDialog(ScanReturnParcelActivity.this,ScanReturnParcelActivity.class,"submit success","Success");
				}else{
					showDialog(ScanReturnParcelActivity.this,ScanReturnParcelActivity.class,weightModel.getReason(),"Failure");
				}
			}
		
		};
		
		
	};
	
	private class MainHandler extends Handler{
		
		public void handleMessage(Message msg){
			
			switch (msg.what) {
			case HadwareControll.BARCODE_READ:
				 
				  String result  = msg.obj+"";
				  Loge("", result);
				  if (etParcel.isFocused() == true) {
					  etParcel.setText(result);
					  etParcelNum.requestFocus();
				  }else if (etParcelNum.isFocused() == true) {
					  etParcelNum.setText(result);
					  skuno = true;
				  }				  
				  if (skuno == true) {
					if (etIndex == 0) {
						addContent();
						etIndex++;
					}else{
						for (int i = 1; i < etLink.size(); i++) {
							if (etLink.get(i).isFocused() == true) {
								etLink.get(i).setText(result);
								if(i == etLink.size()-1)
								addContent();
								etIndex++;
								break;
							}
						}						
					}   						
				  }  		
				break;		
			default:
				break;
			}
		}
	}
	
	private void addContent(){
		View view =null;
		EditText etSkuNo = null;
		TextView tvSkuNo = null;
		if (view ==null) {			
			view = this.getLayoutInflater().inflate(R.layout.item_skuno_list,null);
			llReparcel.addView(view);
			etSkuNo = (EditText) view.findViewById(R.id.et_input_sku);
			tvSkuNo = (TextView) view.findViewById(R.id.tv_sku_list);
			rlReParcel = (RelativeLayout) view.findViewById(R.id.rl_pallet);
			view.setTag(etSkuNo);
			view.setTag(tvSkuNo);
			view.setTag(rlReParcel);
		}else{
			etSkuNo = (EditText) view.getTag();
			tvSkuNo = (TextView) view.getTag();
			rlReParcel = (RelativeLayout) view.getTag();
		}
			etSkuNo.requestFocus();
			tvSkuNo.setText("ParcelNum "+number+" . :");
			if (number%2==1) {
				rlReParcel.setBackgroundColor(Color.argb(255,220,220,220));
				tvSkuNo .setBackgroundColor(Color.argb(255,220,220,220));
			}
			etLink.add(index,etSkuNo);
			number++;
	        index++;
		}
	public void showDialogHint(ReturnParcel rp){
		final List<String> list = new ArrayList<>();
		//final String items[]={"张三","李四","王五"};  
		for (int i = 0; i <rp.getReasons().size()  ; i++) {
				list.add("error"+i+":"+rp.getReasons().get(i).getReason());
			}
        //dialog参数设置  
        AlertDialog.Builder builder=new AlertDialog.Builder(this);  //先得到构造器  
        builder.setTitle("Error"); //设置标题  
        //builder.setMessage("是否确认退出?"); //设置内容  
        //builder.setIcon(R.mipmap.ic_launcher);//设置图标，图片id即可  
        //设置列表显示，注意设置了列表显示就不要设置builder.setMessage()了，否则列表不起作用。
        int size = list.size();
        String items[] = list.toArray(new String[size]);
        builder.setItems(items,new DialogInterface.OnClickListener() {  
            @Override  
            public void onClick(DialogInterface dialog, int which) {  
                dialog.dismiss();    
            }  
        });  
        builder.setNegativeButton("Continue", new DialogInterface.OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				// TODO Auto-generated method stub
				IntentUtil.startActivity(ScanReturnParcelActivity.this,ScanReturnParcelActivity.class);
			}
		});
        
        builder.setPositiveButton("Confirm",new DialogInterface.OnClickListener() {  
            @Override  
            public void onClick(DialogInterface dialog, int which) {  
                dialog.dismiss();  
            }  
        });  
        builder.create().show();  
	}
	
	
  private void addContent1(){
		
		LinearLayout layout = new LinearLayout(getApplicationContext());
		LinearLayout.LayoutParams lLayoutlayoutParams = new LinearLayout.LayoutParams
				(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
		lLayoutlayoutParams.topMargin = 5;
		layout.setLayoutParams(lLayoutlayoutParams);
		layout.setBackgroundColor(color.background_light);
		layout.setOrientation(LinearLayout.VERTICAL);
		
		RelativeLayout rlBnt = new RelativeLayout(ScanReturnParcelActivity.this);
		RelativeLayout.LayoutParams rlParam = new RelativeLayout.LayoutParams
				(ViewGroup.LayoutParams.MATCH_PARENT, 39);	
		rlBnt.setPadding(15, 0, 0, 0);
		rlBnt.setLayoutParams(rlParam);
		
		TextView tv = new TextView(ScanReturnParcelActivity.this);
		RelativeLayout.LayoutParams tvParam = new RelativeLayout.LayoutParams
				(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
		tvParam.addRule(RelativeLayout.CENTER_VERTICAL);
		tv.setLayoutParams(tvParam);
		tv.setText("parcelNum. :");
		tv.setTextColor(Color.argb(255,102, 102,102));
		tv.setId(tvIDIndex);
		rlBnt.addView(tv);
		
		EditText etContent = new EditText(ScanReturnParcelActivity.this);
		RelativeLayout.LayoutParams etParam = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,
			ViewGroup.LayoutParams.WRAP_CONTENT);
		etParam.setMargins(-7, 0, 0, 0);
		etParam.addRule(RelativeLayout.CENTER_VERTICAL);
		etParam.addRule(RelativeLayout.RIGHT_OF,tvIDIndex);
		etContent.setHint("input box");
		//etContent.setTextColor(color.black);
		etContent.setHintTextColor(Color.argb(255,178,178,178));
		etContent.setSingleLine(true);
		etContent.setTextSize(12);
		etContent.setBackground(null);
		etContent.requestFocus();
		etLink.add(index, etContent);
		Loge("","index"+index);
		View  vw = new View(ScanReturnParcelActivity.this);
		LinearLayout.LayoutParams vwParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 
				1);
		vwParams.setMargins(15, 0,0,0);
		vw.setLayoutParams(vwParams);
		vw.setBackgroundColor(Color.argb(255, 178,178, 178));
		
		rlBnt.addView(etContent, etParam);
		layout.addView(rlBnt);
		layout.addView(vw);
		llReparcel.addView(layout);
		tvIDIndex++;
		index++;

	}
	
	private BroadcastReceiver _keyReceiver = new BroadcastReceiver() {
		public void onReceive(Context context, Intent intent) {
			
			  Log.d("012","action:"+intent.getAction());
				String key_action = intent.getStringExtra("action");
				String key_code = intent.getStringExtra("code");
			}
		
		};
	
	
	private String toHexString(byte[] byteArray, int size) {
		if (byteArray == null || byteArray.length < 1)
			throw new IllegalArgumentException(
					"this byteArray must not be null or empty");
		final StringBuilder hexString = new StringBuilder(2 * size);
		for (int i = 0; i < size; i++) {
			if ((byteArray[i] & 0xff) < 0x10)//
				hexString.append("0");
			hexString.append(Integer.toHexString(0xFF & byteArray[i]));
			if (i != (byteArray.length - 1))
				hexString.append("");
		}
		return hexString.toString().toUpperCase();
	}
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		
		Log.d("012","keyCode:"+keyCode);
		if ((keyCode == KeyEvent.KEYCODE_F9 || keyCode == KeyEvent.KEYCODE_F10
				|| keyCode == KeyEvent.KEYCODE_F11)&&event.getRepeatCount()==0) {
			controll.scan_start();
			return true;
		}
		return super.onKeyDown(keyCode, event);
	}

	public boolean onKeyUp(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_F9 || keyCode == KeyEvent.KEYCODE_F10
				|| keyCode == KeyEvent.KEYCODE_F11) {
			controll.scan_stop();
			return true;
		}
		return super.onKeyUp(keyCode, event);
	}

	private void playBeepSound() {
		if (mediaPlayer != null) {
			mediaPlayer.start();
		}
		
		//Controll.playbeep();
		

	}

	private void initBeepSound() {
		if (mediaPlayer == null) {
			mediaPlayer = new MediaPlayer();
			AssetFileDescriptor file = getResources().openRawResourceFd(
					R.raw.beep);
			try {
				if (mediaPlayer != null) {
					mediaPlayer.setDataSource(file.getFileDescriptor(),
							file.getStartOffset(), file.getLength());
					file.close();

					mediaPlayer.prepare();
				}
			} catch (IOException e) {
				mediaPlayer = null;
			}
		}
	}

	protected void onDestroy() {
		controll.Close();
		controll.m_handler = null;

		super.onDestroy();
	}


}
