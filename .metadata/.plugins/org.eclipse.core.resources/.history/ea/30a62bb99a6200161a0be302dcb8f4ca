package com.wmsterminal.activity.scan;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import android.R.color;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.AssetFileDescriptor;
import android.graphics.Color;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.alibaba.fastjson.JSON;
import com.lidroid.xutils.ViewUtils;
import com.lidroid.xutils.view.annotation.ViewInject;
import com.lidroid.xutils.view.annotation.event.OnClick;
import com.wmsterminal.R;
import com.wmsterminal.base.activity.BaseActivity;
import com.wmsterminal.common.thread.NetWorkPost;
import com.wmsterminal.common.thread.TaskExecutor;
import com.wmsterminal.func.HadwareControll;
import com.wmsterminal.model.ReleasePallet;
import com.wmsterminal.model.ReturnParcel;
import com.wmsterminal.util.ObjectUtil;
import com.wmsterminal.util.RequestUtil;
import com.wmsterminal.util.SharedUtil;

public class ReleasePalletActivity extends BaseActivity implements View.OnClickListener{

	@ViewInject(R.id.et_palletnum_scan)
	private EditText etPallet;
	
	@ViewInject(R.id.tv_rpsubmit_scan)
	private TextView tvSubmit;
	
	@ViewInject(R.id.ll_releasepallet_scan)
	private LinearLayout llReleasePallet;
	
	private RelativeLayout rlPallet;
	
	public static final String KEY_RECEIVEER_ACTION = "com.idatachina.SCANKEYEVENT";

	public Handler mHandler = new MainHandler();
	//public ReadDoSomeThing readDoSomeThing;
	static ScanReturnParcelActivity ss;
	protected MediaPlayer mediaPlayer = null;
	HadwareControll controll = new HadwareControll(this);
	public boolean btn_scan =false;
	public  boolean et_scan = true;
	
    private int tvIDIndex = 1000;
	private int index = 1;
	private int etIndex = 1;
	private int number = 2;
    
    private LinkedList<EditText> etLink;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		controll.Open();
		controll.m_handler = mHandler;
	    IntentFilter m_keyfilter = new IntentFilter();
		m_keyfilter.addAction(KEY_RECEIVEER_ACTION);
		this.registerReceiver(_keyReceiver,m_keyfilter);
	}
	
	@Override
	protected void initSet() {
		// TODO Auto-generated method stub
		super.initSet();
		etLink = new LinkedList<EditText>();
		etLink.add(etPallet);
	}
	
	@Override
	protected void initView() {
		// TODO Auto-generated method stub
		super.initView();
		View view = getLayoutInflater().inflate(R.layout.scan_releasepallet, null);
		mLinearLayout.addView(view);
		ViewUtils.inject(this);
	}
	
	@OnClick({R.id.tv_rpsubmit_scan})
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		
		switch (v.getId()) {
		case R.id.tv_rpsubmit_scan:
			showProgressDialog("submit...");
			List<Map<String,String>> sentPallets = new ArrayList<>();
			for (int i =1; i < etLink.size()-1; i++) {
				Map<String,String> map = new HashMap<>();
				
					if (!ObjectUtil.isEmpty(etPallet.getText().toString().trim())) {
						map.put("palletNum",etPallet.getText().toString().trim());
						sentPallets.add(map);
					}
				
					if (!ObjectUtil.isEmpty(etLink.get(i).getText().toString().trim())) {
						map.put("palletNum", etLink.get(i).getText().toString().trim());
						sentPallets.add(map);
					}
				
			}
			Map<String,List<Map<String,String>>> mlMap = new HashMap<>();
			mlMap.put("sentPallets", sentPallets);
			Map<String,String> mMap = RequestUtil.requByJson("reqJson", mlMap);
			Log.e("releasePallet",mMap.get("reqJson"));
			TaskExecutor.Execute(new NetWorkPost(this, "wms/release-pallet", handler).setMapOfData(mMap,SharedUtil.getToken(this)));
		 	if (isFastDoubleClick()) {
                return;
            }

			break;

		default:
			break;
		}
	}
	
	private Handler handler = new Handler(){
		
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			hideProgressDialog();
			String json = msg.obj.toString();
			ReleasePallet releasePallet = null;
			try {
				releasePallet =	JSON.parseObject(json, ReleasePallet.class);
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			
			if (releasePallet.getStatus().equals("success")) {
				showDialog(ReleasePalletActivity.this,ReleasePalletActivity.class,"Submit Success", "Success");

			}else{
				showDialogHint(releasePallet);
			}
		};
	};
	
	public void showDialogHint(ReleasePallet rp){
		final List<String> list = new ArrayList<>();
		//final String items[]={"张三","李四","王五"};  
		for (int i = 0; i <rp.getReasons().size()  ; i++) {
	     		list.add("error"+rp.getReasons().get(i).getPalletnum()+":"+rp.getReasons().get(i).getReason());
			}
        //dialog参数设置  
        AlertDialog.Builder builder=new AlertDialog.Builder(this);  //先得到构造器  
        builder.setTitle("Hint"); //设置标题  
        //builder.setMessage("是否确认退出?"); //设置内容  
        //builder.setIcon(R.mipmap.ic_launcher);//设置图标，图片id即可  
        //设置列表显示，注意设置了列表显示就不要设置builder.setMessage()了，否则列表不起作用。
        int size = list.size();
        String items[] = list.toArray(new String[size]);
        builder.setItems(items,new DialogInterface.OnClickListener() {  
            @Override  
            public void onClick(DialogInterface dialog, int which) {  
                dialog.dismiss();    
            }  
        });  
        builder.setPositiveButton("Confirm",new DialogInterface.OnClickListener() {  
            @Override  
            public void onClick(DialogInterface dialog, int which) {  
                dialog.dismiss();  
            }  
        });  
        builder.create().show();  
	}	
	
	private BroadcastReceiver _keyReceiver = new BroadcastReceiver() {
		public void onReceive(Context context, Intent intent) {
			
			  Log.d("012","action:"+intent.getAction());
				String key_action = intent.getStringExtra("action");
				String key_code = intent.getStringExtra("code");
			}
		
		};
	
	private class MainHandler extends Handler{
		
		public void handleMessage(Message msg){
			
			switch (msg.what) {
			case HadwareControll.BARCODE_READ:
				 
				  
				  String result  = msg.obj+"";
				  //etLink.get(0).append(result);
			if (etPallet.isFocused()) {
					  etPallet.append(result);
					  if(etIndex == 1)
					    addContent();
				}else{
					for (int i = 1; i < etLink.size(); i++) {
						if (etLink.get(i).isFocused() == true) {
							etLink.get(i).setText(result);
							if(i == etLink.size()-1)
							addContent();
							etIndex++;
							break;
						}
					}		
				}
				break;						

			default:
				break;
			
		}
		}
	}
	
	private void addContent(){
		View view =null;
		EditText etSkuNo = null;
		TextView tvSkuNo = null;
		if (view ==null) {			
			view = this.getLayoutInflater().inflate(R.layout.item_skuno_list,null);
			llReleasePallet.addView(view);
			etSkuNo = (EditText) view.findViewById(R.id.et_input_sku);
			tvSkuNo = (TextView) view.findViewById(R.id.tv_sku_list);
			rlPallet = (RelativeLayout) view.findViewById(R.id.rl_pallet);
			view.setTag(etSkuNo);
			view.setTag(tvSkuNo);
			view.setTag(rlPallet);
		}else{
			etSkuNo = (EditText) view.getTag();
			tvSkuNo = (TextView) view.getTag();
			rlPallet = (RelativeLayout) view.getTag();
		}
			etSkuNo.requestFocus();
			tvSkuNo.setText("PalletNum "+number+" . :");
			if (number%2 == 0) {
				rlPallet.setBackgroundColor(Color.argb(255,220,220,220));
				tvSkuNo .setBackgroundColor(Color.argb(255,220,220,220));
			}
			etLink.add(index,etSkuNo);
			number++;
	        index++;
		}	
 
	
	private String toHexString(byte[] byteArray, int size) {
		if (byteArray == null || byteArray.length < 1)
			throw new IllegalArgumentException(
					"this byteArray must not be null or empty");
		final StringBuilder hexString = new StringBuilder(2 * size);
		for (int i = 0; i < size; i++) {
			if ((byteArray[i] & 0xff) < 0x10)//
				hexString.append("0");
			hexString.append(Integer.toHexString(0xFF & byteArray[i]));
			if (i != (byteArray.length - 1))
				hexString.append("");
		}
		return hexString.toString().toUpperCase();
	}
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		
		Log.d("012","keyCode:"+keyCode);
		if ((keyCode == KeyEvent.KEYCODE_F9 || keyCode == KeyEvent.KEYCODE_F10
				|| keyCode == KeyEvent.KEYCODE_F11)&&event.getRepeatCount()==0) {
			controll.scan_start();
			return true;
		}
		return super.onKeyDown(keyCode, event);
	}

	public boolean onKeyUp(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_F9 || keyCode == KeyEvent.KEYCODE_F10
				|| keyCode == KeyEvent.KEYCODE_F11) {
			controll.scan_stop();
			return true;
		}
		return super.onKeyUp(keyCode, event);
	}

	private void playBeepSound() {
		if (mediaPlayer != null) {
			mediaPlayer.start();
		}
		
		//Controll.playbeep();
		

	}

	private void initBeepSound() {
		if (mediaPlayer == null) {
			mediaPlayer = new MediaPlayer();
			AssetFileDescriptor file = getResources().openRawResourceFd(
					R.raw.beep);
			try {
				if (mediaPlayer != null) {
					mediaPlayer.setDataSource(file.getFileDescriptor(),
							file.getStartOffset(), file.getLength());
					file.close();

					mediaPlayer.prepare();
				}
			} catch (IOException e) {
				mediaPlayer = null;
			}
		}
	}

	protected void onDestroy() {
		controll.Close();
		controll.m_handler = null;

		super.onDestroy();
	}


	

}
